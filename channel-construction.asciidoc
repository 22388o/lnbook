Payment channels are the core and most fundamental building block of the Lightning Network.
Of course, every detail of a technology is exists for a reason but the Lightning Network is literally built around the idea and concept of payment channels.
In the previous chapters you have already learned about payment channels, what properties they have, and on a high level how they work and how they can be constructed.
In this chapter we will dig deeper into the protocol details that are needed to open and close payment channels.
Where necessary some information from the first chapters of this book will be repeated.
If you are new to the topic we highly encourage you to start there first.
If you however already know a fair share about bitcoin script, OP_CODES and protocol design it might be sufficient to skip the previous chapter and start here with us.
This books follows the construction of payment channels as described in BOLT 02 which is titled `peer protocol` and describes how two peers communicate to open, maintain and close a channel.
In this section we will only talk about opening and closing a channel.
The operation of a channel which means either making or forwarding a payment is discussed in our chapter about routing.
Also other constructions of payment channels are known and being discussed by the developers but as of writing only the channels as described in BOLT 02 are supported by the protocol and the implementations.

To repeat what you should already know a payment channel is encoded as an unspent 2 out of 2 multisignature transaction output.
The capacity of the channel relates to the amount that is bound to the unspent 2 out of 2 multisignature transaction output.
It is opened with the help of a funding transaction that sends bitcoin to a 2 out of 2 multisignature output together with a communication protocol that helps to initialize its state.
The balance of the channel encodes how the capacity is split between the two peers who maintain the channel.
Technically it is encoded by a the most recent pair of a sequence of pairs of similar (but not equal) presigned commitment transactions.
Each channel partner has both signatures for on of the commitment transactions from the sequence of pairs.
The split of the capacity is realized by a `to_local` and a `to_remote` output that is part of every commitment transaction
The `to_local` output goes to an address that is controlled by the peer that holds this fully signed commitment transaction.
`to_local` outputs, which also exist in the second stage HTLC transactions, have two spending conditions.
The `to_local` output can be spent either at any time with the help of a revocation secrete or after a timelock with the secret key that is controlled by the peer holding this commitment transaction.
The revocation secrete is necessary to economically disincentivice peers to publish previous commitment transactions.
Addresses and revokation secretes change with every new pair of commitment transactions that are being negotiated.
The Lightning Network as a protocol defines the communication protocols that are necessary to achieve this.

### Opening a payment channel
A payment channel currently always only exists between exactly two peers.
Even though two users are owning and maintaining the channel the current construction requires only one user to open the channel.
This does not mean that only one peer is needed to open a channel.
It does however mean that a user who opens the channel also has to provide the bitcoins to fund the channel.
Let us stick to our example where Alice opens a channel with Bob with a capacity of 100k satoshi.
This means that Alice provides 100k satoshi.
Once the channel is open Alice will be able to send 99k satoshi along this channel.
Bob on the other side will be able to receive 99k satoshi along that channel.
This means that initially Alice will not be able to recieve Bitcoins on this channel and that Bob initially will not be able to send Bitcoin along that channel.

You have learnt before that the capacity of a payment channel is encoded as a 2 out of 2 multisignature output.
In a fully functional payment channel each owner controlls one private key of this multisignature output.

[NOTE]
====
Even though Alice and Bob both have a public node key to wich they own the private secret opening a payment channel is not as easy as sending bitcoins to the 2 out of 2 multisignature output that belongs to the public keys of Alice and Bob.
Let us assume for a moment that Alice would send 100k Satoshi to the Multisig address resulting from hers and Bob's public node id.
In that case Alice will never be able to maintain her funds back without the help of Bob.
Of course we want our payment channels to work in a way that Alice does not need to trust Bob. 
Bob could however refuse to sign a transaction that sends all those outputs back to an address that is controlled by Alice.
He would be able to blackmail Alice to assign a significant amount of those Bitcoin to an output address that is controlled by him.
Thus Bob can't steel the coins from Alice directly but he can threten Alice to have her coins lost forever.
This example shows that unfortunatelly opening a channel will be a little bit more complex than just sending Bitcoins to a multisignature address.
====

In order to avoid the reuse of addresses Alice and Bob will generate a new set of keys for the multisig address that they use to open the channel.
Alice needs to inform Bob which key she intends to use for their channel and ask him which key he intends to use.
She will do that by sending Bob and `open_channel` message signaling her interest to open a channel.
This message contains a lot of additional data fields.
Most of them specify meta data which is necessary for the channel operation and can be be safely ignored for now.
We will only look at the following ones: 

* [chain_hash:chain_hash]
* [32*byte:temporary_channel_id]
* [u64:funding_satoshis]
* [point:funding_pubkey]
* [point:revocation_basepoint], [point:payment_basepoint], [point:delayed_payment_basepoint], [point:htlc_basepoint], [point:first_per_commitment_point]

With the `chain_hash` Alice signals that she intends to open the channel on the Bitcoin blockchain.
While the Lightning Network was certainly invented to scale the amount of payments that can be conducted on the Bitcoin Network it is interesting to note that the Network is designed in a way that allows to build channels over various currencies.
If a node has channels with more than one currency it is even possible to route payments through multi asset channels.
However this turns out to be a little bit tricky in reality as the exchange rate between currencies might change which might lead the forwarding node to wait for a better ex hange rate to settle or to abort the payment process.
For the opening process the final channel id cannot be determined yet thus Alice needs to select a random channel id which Bob and she can use to identify the messages for this channel during the opening phase.
This design descision allows multiple channels to exist between two nodes - though currently only LND supports this feature.
Alice tells Bob for how many satoshis she wishes to open the channel.
This information is necessary to construct the commitment transaction ...

[NOTE]
====
Commitment transactions fulfill two purposes:
1. refund / split into balance
2. penalty. 
====


[NOTE]
====
The importance of the segwit upgrade.


====

[NOTE]
====
The current construction could be generalized to multiparty channels and channel factories.
However the communication protocol would suffer from increased complexity.
====

Chapter overview:
  * describes how channels are put together at the script+transaction level
  * details how a channel if funded in the protocol
  * details how a channel is updated in the protocol
  * describes what needs to happen when a channel is force closed

Relevant questions to answer:
  * Channel construction:
      * What's the difference between a replace-by-revocation based and a replace-by-versioning commitment format?
      * What does the funding output script look like, what security guarantees does it give us?
      * What's the difference between CSV and CLTV? How do both of these use the existing fields of the transaction to enforce new behavior?
      * How do we implement revocation in our channel format?
      * What does the script on the commitment to the broadcaster look like?
      * What does the script on the commitment for the party that didn't broadcast look like?
      * How are HTLCs constructed? What are second-level HTLCs?
      * How has the commitment format in LN changed over time? What are some of the changes to the commitment format that've happened?
  * Funding flow and messages:
      * What are the messages exchanged to initiate a new channel with another peer?
      * What do the parameters such as the max in flight do?
      * How should the CSV values and the number of blocks until a channel is considered confirmed change with the size of the channel?
      * What are wumbo channels? How are they enabled?
      * What is an upfront shutdown address? What security does it offer?
      * Is it possible to open multiple channels in a single transaction?
  * Channel state machine:
      * What does Medium Access Control mean in the context of network protocols?
      * At a high level, how does the MAC protocol for 802.11 work?
      * What steps need to happen for a new commitment state to be proposed and irrevocably committed for both parties?
      * When is it safe for a party to forward a new HTLC to another peer? (may be out of scope for this chapter)
      * Is it possible to commit a 
      * How does the current MAC protocol for the LN work?
        * What does an htlc_add message contain?
        * How are HTLCs cancelled or settled?
        * Can both parties propose updates at the same time?
        * Is it possible for a party to add a batch of HTLCs in a single go?
        * What constraints exist that both parties need to adhere to?
      * How are fees paid in a channel? Who pays which fees? Has this changed with newer commitment formats?
      * How would the MAC protocol need to change if we used channels with symmetric state?
